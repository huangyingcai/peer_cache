#############################################################################
# Makefile for building: peer_cache
# Generated by qmake (2.01a) (Qt 4.7.4) on: Wed Dec 5 20:41:47 2012
# Project:  peer_cache.pro
# Template: app
# Command: /usr/bin/qmake -o Makefile peer_cache.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_NETWORK_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -g -m64 -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -g -m64 -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/default -I. -I/usr/include/QtCore -I/usr/include/QtNetwork -I/usr/include/QtGui -I/usr/include -Ikademlia -I/usr/include/QtCrypto -I.
LINK          = g++
LFLAGS        = -m64 -Wl,-O1
LIBS          = $(SUBLIBS)  -L/usr/lib64 -L/usr/lib64 -lqca -lQtGui -L/usr/X11R6/lib64 -lQtNetwork -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = main.cc \
		kademlia/kademlia_client.cc \
		kademlia/data_server.cc \
		kademlia/request_manager.cc \
		kademlia/request.cc \
		kademlia/utilities.cc moc_kademlia_client.cpp \
		moc_data_server.cpp \
		moc_request_manager.cpp \
		moc_request.cpp
OBJECTS       = main.o \
		kademlia_client.o \
		data_server.o \
		request_manager.o \
		request.o \
		utilities.o \
		moc_kademlia_client.o \
		moc_data_server.o \
		moc_request_manager.o \
		moc_request.o
DIST          = /usr/share/qt4/mkspecs/common/g++.conf \
		/usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_phonon.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/crypto.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		peer_cache.pro
QMAKE_TARGET  = peer_cache
DESTDIR       = 
TARGET        = peer_cache

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: peer_cache.pro  /usr/share/qt4/mkspecs/default/qmake.conf /usr/share/qt4/mkspecs/common/g++.conf \
		/usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_phonon.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/crypto.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib64/libqca.prl \
		/usr/lib64/libQtGui.prl \
		/usr/lib64/libQtCore.prl \
		/usr/lib64/libQtNetwork.prl
	$(QMAKE) -o Makefile peer_cache.pro
/usr/share/qt4/mkspecs/common/g++.conf:
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/modules/qt_phonon.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/release.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/crypto.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib64/libqca.prl:
/usr/lib64/libQtGui.prl:
/usr/lib64/libQtCore.prl:
/usr/lib64/libQtNetwork.prl:
qmake:  FORCE
	@$(QMAKE) -o Makefile peer_cache.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/peer_cache1.0.0 || $(MKDIR) .tmp/peer_cache1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/peer_cache1.0.0/ && $(COPY_FILE) --parents kademlia/kademlia_client.hh kademlia/data_server.hh kademlia/request_manager.hh kademlia/request.hh kademlia/utilities.hh .tmp/peer_cache1.0.0/ && $(COPY_FILE) --parents main.cc kademlia/kademlia_client.cc kademlia/data_server.cc kademlia/request_manager.cc kademlia/request.cc kademlia/utilities.cc .tmp/peer_cache1.0.0/ && (cd `dirname .tmp/peer_cache1.0.0` && $(TAR) peer_cache1.0.0.tar peer_cache1.0.0 && $(COMPRESS) peer_cache1.0.0.tar) && $(MOVE) `dirname .tmp/peer_cache1.0.0`/peer_cache1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/peer_cache1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_kademlia_client.cpp moc_data_server.cpp moc_request_manager.cpp moc_request.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_kademlia_client.cpp moc_data_server.cpp moc_request_manager.cpp moc_request.cpp
moc_kademlia_client.cpp: types.hh \
		kademlia/data_server.hh \
		kademlia/request_manager.hh \
		constants.hh \
		kademlia/kademlia_client.hh
	/usr/bin/moc $(DEFINES) $(INCPATH) kademlia/kademlia_client.hh -o moc_kademlia_client.cpp

moc_data_server.cpp: types.hh \
		kademlia/data_server.hh
	/usr/bin/moc $(DEFINES) $(INCPATH) kademlia/data_server.hh -o moc_data_server.cpp

moc_request_manager.cpp: types.hh \
		constants.hh \
		kademlia/request_manager.hh
	/usr/bin/moc $(DEFINES) $(INCPATH) kademlia/request_manager.hh -o moc_request_manager.cpp

moc_request.cpp: types.hh \
		constants.hh \
		kademlia/request.hh
	/usr/bin/moc $(DEFINES) $(INCPATH) kademlia/request.hh -o moc_request.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean 

####### Compile

main.o: main.cc types.hh \
		includes.hh
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o main.cc

kademlia_client.o: kademlia/kademlia_client.cc constants.hh \
		includes.hh \
		kademlia/kademlia_client.hh \
		types.hh \
		kademlia/data_server.hh \
		kademlia/request_manager.hh
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o kademlia_client.o kademlia/kademlia_client.cc

data_server.o: kademlia/data_server.cc constants.hh \
		includes.hh \
		kademlia/data_server.hh \
		types.hh
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o data_server.o kademlia/data_server.cc

request_manager.o: kademlia/request_manager.cc includes.hh \
		kademlia/utilities.hh \
		types.hh \
		kademlia/request.hh \
		constants.hh \
		kademlia/request_manager.hh
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o request_manager.o kademlia/request_manager.cc

request.o: kademlia/request.cc includes.hh \
		kademlia/utilities.hh \
		types.hh \
		kademlia/request.hh \
		constants.hh
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o request.o kademlia/request.cc

utilities.o: kademlia/utilities.cc constants.hh \
		kademlia/utilities.hh \
		types.hh
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o utilities.o kademlia/utilities.cc

moc_kademlia_client.o: moc_kademlia_client.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_kademlia_client.o moc_kademlia_client.cpp

moc_data_server.o: moc_data_server.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_data_server.o moc_data_server.cpp

moc_request_manager.o: moc_request_manager.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_request_manager.o moc_request_manager.cpp

moc_request.o: moc_request.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_request.o moc_request.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

